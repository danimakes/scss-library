@use 'sass:meta';
@use 'sass:list';
@use 'sass:map';
@use '../scss2/list2';
@use '../scss2/map2';

@mixin new-space-mixin(
    $mixin-args,
    $properties,
    $properties-short-hand: (),
    $values-short-hand: (),
    $fn: null
) {
    // map containing every property: value set
    $lines: ();

    @each $line in $mixin-args {
        $property: list2.head($line);
        $values: list2.tail($line);
        
        // replacing property's short-hand
        $property: map2.get($properties-short-hand, $property, $property);

        // checking if the given property is allowed
        @if list2.contains($properties, $property) == false {
            @error 'Undefined property `#{list2.head($line)}`';
        }

        // replacing values' short-hand
        $new-values: ();
        $current-values-short-hand: map2.get($values-short-hand, $property);
        @if $current-values-short-hand != null {
            @each $value in $values {
                $value: map2.get($current-values-short-hand, $value, $value);
                $new-values: list.append($new-values, $value);
            }
        } @else {
            $new-values: $values;
        }


        // adding to the map
        $lines: map.set($lines, $property, $new-values);

    }

    // processing values
    @if $fn != null {
        $lines: meta.call($fn, $lines);
    }

    // finally adding css 
    @each $property, $value in $lines {
        @if list.length($value) == 0 {
            @error 'Empty Argument List `#{$property}: ()`';
        }

        #{$property}: $value;
    }
}